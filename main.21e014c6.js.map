{"version":3,"sources":["node_modules/omgopass/random.browser.js","node_modules/omgopass/index.js","src/main.js"],"names":["document","addEventListener","$password","getElementsByName","$button","getElementsByClassName","$copyButton","$numbers","$titlecase","renderPassword","value","hasNumbers","checked","titlecased","select","execCommand","selection","empty","window","getSelection","removeAllRanges"],"mappings":";;;AAAA,IAAA,EAAA,KAAA,QAAA,KAAA,SAEA,OAAA,QAAA,CAAA,GAAA,EAAA,gBAAA,IAAA,WAAA;;ACFA,MAAA,EAAA,QAAA,YAEA,OAAA,QAAA,EAAA,EAAA,KACA,EAAA,CACA,eAAA,EACA,kBAAA,EACA,kBAAA,EACA,YAAA,EACA,YAAA,EACA,OAAA,SACA,WAAA,sBACA,KAIA,MAAA,EAAA,GACA,EAAA,EAAA,eAAA,IAAA,EAAA,IAGA,EAAA,EACA,WAAA,EACA,OAAA,EACA,WAAA,EACA,WAAA,EACA,kBAAA,EACA,kBAAA,MAEA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,EAAA,EAAA,EAAA,IACA,MAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,OAAA,IAAA,GAAA,EAAA,EAAA,cACA,IAGA,OAAA,EAAA,EAAA,EAAA,IACA,GAGA,EAAA,GAAA,EAAA,EAAA,EAAA,SAEA,EAAA,CAAA,EAAA,KACA,IAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,IACA,GAAA,EAAA,GAGA,OAAA,GAGA,IAAA,EAAA,GACA,EAAA,MACA,EAAA,EAEA,MAAA,EAAA,IACA,GAAA,IACA,EAAA,EAAA,GACA,EAAA,GAGA,EAAA,KAAA;;ACxDA,aAHA,QAAA,gBACA,IAAA,EAAA,EAAA,QAAA,aAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAAA,SAASC,iBAAiB,mBAAoB,WACtCC,IAAAA,EAAYF,SAASG,kBAAkB,YAAY,GACnDC,EAAUJ,SAASK,uBAAuB,UAAU,GACpDC,EAAcN,SAASK,uBAAuB,kBAAkB,GAChEE,EAAWP,SAASG,kBAAkB,WAAW,GACjDK,EAAaR,SAASG,kBAAkB,aAAa,GAErDM,EAAiB,WACrBP,EAAUQ,OAAQ,EAAiB,EAAA,SAAA,CACjCC,WAAYJ,EAASK,QACrBC,WAAYL,EAAWI,WAe3BH,IAEAL,EAAQH,iBAAiB,QAASQ,GAClCF,EAASN,iBAAiB,SAAUQ,GACpCD,EAAWP,iBAAiB,SAAUQ,GACtCH,EAAYL,iBAAiB,QAhBL,WACtBC,EAAUY,SACVd,SAASe,YAAY,QAEjBf,SAASgB,UACXhB,SAASgB,UAAUC,QACVC,OAAOC,cAChBD,OAAOC,eAAeC,oBAW1BlB,EAAUD,iBAAiB,QAAS,WAClCC,EAAUY","file":"main.21e014c6.js","sourceRoot":"..","sourcesContent":["let crypto = self.crypto || self.msCrypto;\n\nmodule.exports = size => crypto.getRandomValues(new Uint8Array(size));\n","const getRandomValues = require(\"./random\");\r\n\r\nmodule.exports = (options = {}) => {\r\n  return getRandomPassword({\r\n    syllablesCount: 3,\r\n    minSyllableLength: 2,\r\n    maxSyllableLength: 3,\r\n    hasNumbers: true,\r\n    titlecased: true,\r\n    vowels: \"aeiouy\",\r\n    consonants: \"bcdfghklmnprstvz\",\r\n    ...options\r\n  });\r\n};\r\n\r\nconst getRandomPassword = settings => {\r\n  return produce(settings.syllablesCount, () => getRandomSyllable(settings));\r\n};\r\n\r\nconst getRandomSyllable = ({\r\n  consonants,\r\n  vowels,\r\n  hasNumbers,\r\n  titlecased,\r\n  minSyllableLength: minLength,\r\n  maxSyllableLength: maxLength\r\n}) => {\r\n  const length = minLength + random(maxLength - minLength + 1);\r\n\r\n  const syllable = produce(length, index => {\r\n    const char = getRandomChar(index % 2 ? vowels : consonants);\r\n    if (index === 0 && titlecased) return char.toUpperCase();\r\n    return char;\r\n  });\r\n\r\n  if (hasNumbers) return syllable + random(10);\r\n  return syllable;\r\n};\r\n\r\nconst getRandomChar = stack => stack[random(stack.length)];\r\n\r\nconst produce = (number, callback) => {\r\n  for (var index = 0, result = \"\"; index < number; index++) {\r\n    result += callback(index);\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nlet buffer = [];\r\nlet bufferSize = 0xffff;\r\nlet bufferIndex = bufferSize;\r\n\r\nconst random = limit => {\r\n  if (bufferIndex >= bufferSize) {\r\n    buffer = getRandomValues(bufferSize);\r\n    bufferIndex = 0;\r\n  }\r\n\r\n  return buffer[bufferIndex++] % limit;\r\n};\r\n","import \"./styles.css\";\nimport generatePassword from \"omgopass\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const $password = document.getElementsByName(\"password\")[0];\n  const $button = document.getElementsByClassName(\"button\")[0];\n  const $copyButton = document.getElementsByClassName(\"password__copy\")[0];\n  const $numbers = document.getElementsByName(\"numbers\")[0];\n  const $titlecase = document.getElementsByName(\"titlecase\")[0];\n\n  const renderPassword = () => {\n    $password.value = generatePassword({\n      hasNumbers: $numbers.checked,\n      titlecased: $titlecase.checked\n    });\n  };\n\n  const copyToClipboard = () => {\n    $password.select();\n    document.execCommand(\"copy\");\n\n    if (document.selection) {\n      document.selection.empty();\n    } else if (window.getSelection) {\n      window.getSelection().removeAllRanges();\n    }\n  };\n\n  renderPassword();\n\n  $button.addEventListener(\"click\", renderPassword);\n  $numbers.addEventListener(\"change\", renderPassword);\n  $titlecase.addEventListener(\"change\", renderPassword);\n  $copyButton.addEventListener(\"click\", copyToClipboard);\n\n  $password.addEventListener(\"click\", () => {\n    $password.select();\n  });\n});\n"]}